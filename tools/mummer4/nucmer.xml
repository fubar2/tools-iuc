<tool id="mummer_nucmer" name="Nucmer" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@">
    <description>Align two or more sequences</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="bio_tools"/>
    <expand macro="requirements">
    </expand>
    <command detect_errors="exit_code">
        <![CDATA[
        ln -s $reference_sequence reference.fa &&
        ln -s $query_sequence query.fa &&
        nucmer
            $anchoring
            #if $outform.out_format != "delta":
                #if $outform.makeshort == "1":
                    --sam-short=outsam.sam
                #else:
                    --sam-long=outsam.sam
                #end if
            #end if
            -b '$breaklen'
            -c '$mincluster'
            -D '$diagdiff'
            -d '$diagfactor'
            $noextend
            $direction
            -g '$maxgap'
            -l '$minmatch'
            -L '$minalign'
            $nooptimize
            $nosimplify
            --threads "\${GALAXY_SLOTS:-1}"
            #if $options.advanced == 'enable':
                $options.banded
                $options.large
                $options.genome
                -M '$options.max_chunk'
            #end if
            'reference.fa' 'query.fa'
            #if $outform.out_format != "delta":
                && tail  -n +3 outsam.sam > outsambody
                && samtools dict reference.fa > outsamhead
                && cat outsambody >> outsamhead
                #if $outform.out_format in ['bam-short', 'bam-long']:
                    && samtools view -b -o bam_out.bam outsamhead
                    && samtools sort bam_out.bam -o outsam
                    && samtools index outsam
                #else if $outform.out_format in ['cram-short', 'cram-long']:
                    && samtools view -C -o cram_out.cram  -T reference.fa  outsamhead && mv cram_out.cram outsam
                    && samtools index outsam
                #else
                   && mv outsamhead outsam
                #end if
            #end if
        ]]>
    </command>
    <inputs>
        <param name="reference_sequence" type="data" format="fasta" label="Reference Sequence" help="FastA or multi-FastA" />
        <param name="query_sequence" type="data" format="fasta" label="Query Sequence" help="FastA or multi-FastA" />
        <conditional name="outform">
            <param name="out_format" type="select" label="Output format" help="Default is delta format. Use sam-long or sam-short if downstream processing is needed in Galaxy">
            <option value="delta">Default Mummer delta format - allows plots</option>
            <option value="sam-short">Sam short format</option>
            <option value="sam-long" >Sam long format</option>
            <option value="bam-short">Sam short as bam format</option>
            <option value="bam-long" >Sam long as bam format</option>
            <option value="cram-short">Sam short as cram format</option>
            <option value="cram-long" >Sam long as cram format</option>
            </param>
            <when value="delta">
                <param name="makeshort" type="hidden" value="False" />
            </when>
            <when value="sam-short">
                <param name="makeshort" type="hidden" value="1" />
            </when>
            <when value="sam-long">
                <param name="makeshort" type="hidden" value="0" />
            </when>
            <when value="bam-short">
                <param name="makeshort" type="hidden" value="1" />
            </when>
            <when value="bam-long">
                <param name="shortsam" type="hidden" value="0" />
            </when>
            <when value="cram-short">
                <param name="makeshort" type="hidden" value="1" />
            </when>
            <when value="cram-long">
                <param name="makeshort" type="hidden" value="0" />
            </when>
        </conditional>
         <param name="anchoring" type="select" label="Anchoring" help="Choose a match anchoring strategy">
            <option value="">Use default</option>
            <option value="--mum">Unique matches only (--mum)</option>
            <option value="--maxmatch">All matches (--maxmatch)</option>
        </param>

        <param name="breaklen" type="integer" argument="-b" value="200" label="Break Length"
            help="Set the distance an alignment extension will attempt to extend poor scoring regions before giving up. (-b)" />
        <param name="mincluster" type="integer" argument="-c" value="65" label="Minumum Cluster Length" help="Sets the minimum length of a cluster of matches. (-c)" />
        <param name="diagdiff" type="integer" argument="-D" value="5" label="Maximum Diagonal Difference"
            help="Set the maximum diagonal difference between two adjacent anchors in a cluster. (-D)" />
        <param name="diagfactor" type="float" argument="-d" value="0.12" label="Maximum Diagonal Difference"
            help="Set the maximum diagonal difference between two adjacent anchors in a cluster as a differential fraction of the gap length. (-d)" />
        <param type="boolean" argument="--noextend" truevalue="--noextend" falsevalue="" label="No Extend" help="Do not perform cluster extension step. (--noextend)" />
        <param name="direction" type="select" label="Direction" help="Choose a direction of Query Sequence to Use">
            <option value="">Use foward and reverse sequences</option>
            <option value="-f">Use only forward sequence of query (-f)</option>
            <option value="-r">Use only reverese sequence of query (-r)</option>
        </param>
        <param name="maxgap" type="integer" argument="-g" value="90" label="Maximum Gap Distance" help="Set the maximum gap between two adjacent matches in a cluster. (-g)" />
        <param name="minmatch" type="integer" argument="-l" value="20" label="Minimum Match Length" help="Set the minimum length of a single exact match. (-l)" />
        <param name="minalign" type="integer" argument="-L" value="0" label="Minumum Alignment Length" help="Minimum length of an alignment, after clustering and extension. (-L)" />
        <param type="boolean" argument="--nooptimize" truevalue="--nooptimize" falsevalue="" label="No Alignment Score Optimization"
            help="No alignment score optimization, i.e. if an alignment extension reaches the end of a sequence, it will not backtrack to optimize the alignment score and instead terminate the alignment at the end of the sequence. (--nooptimize)" />
        <param type="boolean" argument="--nosimplify" truevalue="--nosimplify" falsevalue="" label="Don't Simplify Alignments"
            help="Don't simplify alignments by removing shadowed clusters. Use this option when aligning a sequence to itself to look for repeats. (--nosimplify)" />
        <conditional name="options">
            <param name="advanced" type="select" label="Additional options">
                <option value="defaults">Use defaults</option>
                <option value="enable">Select additional options</option>
            </param>
            <when value="enable">
                <param type="boolean" argument="--banded" truevalue="--banded" falsevalue="" label="Banding"
                    help="Enforce absolute banding of dynamic programming matrix based on diagdiff parameter. (--banded)" />
                <param  type="boolean" argument="--large" truevalue="--large" falsevalue="" label="Offsets" help="Force the use of large offsets. (--large)" />
                <param name="genome" type="boolean" argument="-G" truevalue="-G" falsevalue="" label="Map genome to genome" help="For long query sequences. (-G)" />
                <param name="max_chunk" type="integer" argument="-M" value="50000" label="Max Chunk" help="Stop adding sequence for a thread if more than MAX already. (-M)" />
            </when>
            <when value="defaults" />
        </conditional>
    </inputs>
    <outputs>
        <data name="delta_output" format="tabular" from_work_dir="out.delta" label="${tool.name} on ${on_string}: delta format">
           <filter>outform["out_format"] == "delta"</filter>
        </data>
        <data name="sam_output" format="sam" from_work_dir="outsam"  label="${tool.name} on ${on_string}">
           <filter>outform["out_format"] != "delta"</filter>
           <change_format>
                <when input="outform.out_format" value="bam-short" format="bam" />
                <when input="outform.out_format" value="bam-long" format="bam" />
                <when input="outform.out_format" value="cram-short" format="cram" />
                <when input="outform.out_format" value="cram-long" format="cram" />
           </change_format>
        </data>
    </outputs>
    <tests>
        <test expect_num_outputs="1">
            <param name="advanced" value="defaults" />
            <conditional name="outform">
                <param name="out_format" value="delta" />
            </conditional>
            <param name="reference_sequence" ftype="fasta" value="human_aqp3.fasta"/>
            <param name="query_sequence" ftype="fasta" value="mouse_aqp3.fasta" />
            <output name="delta_output" ftype="tabular" compare="diff" lines_diff="2" value="nucmer.txt"/>
        </test>
       <test expect_num_outputs="1">
            <param name="advanced" value="defaults" />
            <param name="makeshort" value="1" />
            <conditional name="outform">
                <param name="out_format" value="bam-short" />
            </conditional>
            <param name="reference_sequence" ftype="fasta" value="human_aqp3.fasta"/>
            <param name="query_sequence" ftype="fasta" value="mouse_aqp3.fasta" />
           <output name="sam_output" ftype="bam" compare="sim_size" value="out.bam" />
        </test>
        <test expect_num_outputs="1">
            <param name="advanced" value="defaults" />
            <param name="makeshort" value="0" />
            <conditional name="outform">
                <param name="out_format" value="cram-long" />
            </conditional>
            <param name="reference_sequence" ftype="fasta" value="human_aqp3.fasta"/>
            <param name="query_sequence" ftype="fasta" value="mouse_aqp3.fasta" />
           <output name="sam_output" ftype="cram" compare="sim_size" value="out.cram" />
        </test>
    </tests>
    <help><![CDATA[
        nucmer is for the all-vs-all comparison of nucleotide sequences contained in multi-FastA data files. It is best used for highly similar sequence that may have large rearrangements. Common use cases are: comparing two unfinished shotgun sequencing assemblies, mapping an unfinished sequencing assembly to a finished genome, and comparing two fairly similar genomes that may have large rearrangements and duplications.

        All output coordinates reference the forward strand of the involved sequence, regardless of the match direction. Also, nucmer now uses only matches that are unique in the reference sequence by default, use different Anchoring options to change this behavior.

**Options:**::

    Defaults in parentheses

    nucmer
    --sam-short filename         Output in sam format - headers have spaces instead of tabs so require replacement
    --sam-long filename         Sam with more fields added.

    --mum             Use anchor matches that are unique in both the reference and query (false)

    --maxmatch        Use all anchor matches regardless of their uniqueness (false)

    -b                Set the distance an alignment extension will attempt to extend poor scoring regions
                      before giving up (200)

    -c                Sets the minimum length of a cluster of matches (65)

    -D                Set the maximum diagonal difference between two adjacent anchors in a cluster (5)

    -d                Set the maximum diagonal difference between two adjacent anchors in a cluster as a
                      differential fraction of the gap length (0.12)

    --noextend        Do not perform cluster extension step (false)

    -f                Use only the forward strand of the Query sequences (false)

    -r                Use only the reverse complement of the Query sequences (false)

    -g                Set the maximum gap between two adjacent matches in a cluster (90)

    -l                Set the minimum length of a single exact match (20)

    -L                Minimum length of an alignment, after clustering and extension (0)

    --nooptimize      No alignment score optimization, i.e. if an alignment extension reaches the end of a
                      sequence, it will not backtrack to optimize the alignment score and instead terminate
                      the alignment at the end of the sequence (false)

    --nosimplify      Don't simplify alignments by removing shadowed clusters. Use this option when aligning
                      a sequence to itself to look for repeats (false)

    --banded          Enforce absolute banding of dynamic programming matrix based on diagdiff parameter (false)

    --large           Force the use of large offsets (false)

    -G                Map genome to genome (long query sequences) (false)

    -M                Max chunk. Stop adding sequence for a thread if more than MAX already. (50000)

    mummerplot has been removed for technical reasons.
    JBrowse is the recommended way to view bam or other pileups on your reference sequence

    ]]></help>
        <expand macro="citation" />
</tool>
